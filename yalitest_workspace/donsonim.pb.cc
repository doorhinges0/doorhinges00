// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "donsonim.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace donson {
namespace im {

namespace {

const ::google::protobuf::Descriptor* ReqHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqHeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqHeartBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspHeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspHeartBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqReLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqReLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspReLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspReLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* RichMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RichMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqUpMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqUpMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspUpMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspUpMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqPushMsgAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqPushMsgAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqUpGrpMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqUpGrpMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspUpGrpMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspUpGrpMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushGrpMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushGrpMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqPushGrpMsgAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqPushGrpMsgAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqOfflineMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqOfflineMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspOfflineMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspOfflineMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqNoticeAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqNoticeAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCheckGrpMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCheckGrpMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GrpInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GrpInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspCheckGrpMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspCheckGrpMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGetGrpMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGetGrpMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspGetGrpMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspGetGrpMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Cmd_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_donsonim_2eproto() {
  protobuf_AddDesc_donsonim_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "donsonim.proto");
  GOOGLE_CHECK(file != NULL);
  ReqHeader_descriptor_ = file->message_type(0);
  static const int ReqHeader_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeader, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeader, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeader, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeader, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeader, cmd_),
  };
  ReqHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqHeader_descriptor_,
      ReqHeader::default_instance_,
      ReqHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqHeader));
  RspHeader_descriptor_ = file->message_type(1);
  static const int RspHeader_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspHeader, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspHeader, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspHeader, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspHeader, reserved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspHeader, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspHeader, ispush_),
  };
  RspHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspHeader_descriptor_,
      RspHeader::default_instance_,
      RspHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspHeader));
  ReqLogin_descriptor_ = file->message_type(2);
  static const int ReqLogin_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, devicetoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, devicetype_),
  };
  ReqLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLogin_descriptor_,
      ReqLogin::default_instance_,
      ReqLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLogin));
  RspLogin_descriptor_ = file->message_type(3);
  static const int RspLogin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLogin, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLogin, apiresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLogin, msg_),
  };
  RspLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspLogin_descriptor_,
      RspLogin::default_instance_,
      RspLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspLogin));
  ReqHeartBeat_descriptor_ = file->message_type(4);
  static const int ReqHeartBeat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeartBeat, token_),
  };
  ReqHeartBeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqHeartBeat_descriptor_,
      ReqHeartBeat::default_instance_,
      ReqHeartBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeartBeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeartBeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqHeartBeat));
  RspHeartBeat_descriptor_ = file->message_type(5);
  static const int RspHeartBeat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspHeartBeat, token_),
  };
  RspHeartBeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspHeartBeat_descriptor_,
      RspHeartBeat::default_instance_,
      RspHeartBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspHeartBeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspHeartBeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspHeartBeat));
  ReqReLogin_descriptor_ = file->message_type(6);
  static const int ReqReLogin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReLogin, token_),
  };
  ReqReLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqReLogin_descriptor_,
      ReqReLogin::default_instance_,
      ReqReLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqReLogin));
  RspReLogin_descriptor_ = file->message_type(7);
  static const int RspReLogin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspReLogin, token_),
  };
  RspReLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspReLogin_descriptor_,
      RspReLogin::default_instance_,
      RspReLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspReLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspReLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspReLogin));
  RichMsg_descriptor_ = file->message_type(8);
  static const int RichMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RichMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RichMsg, msg_),
  };
  RichMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RichMsg_descriptor_,
      RichMsg::default_instance_,
      RichMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RichMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RichMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RichMsg));
  Msg_descriptor_ = file->message_type(9);
  static const int Msg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, time_),
  };
  Msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_descriptor_,
      Msg::default_instance_,
      Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg));
  ReqUpMsg_descriptor_ = file->message_type(10);
  static const int ReqUpMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUpMsg, touin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUpMsg, msg_),
  };
  ReqUpMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqUpMsg_descriptor_,
      ReqUpMsg::default_instance_,
      ReqUpMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUpMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUpMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqUpMsg));
  RspUpMsg_descriptor_ = file->message_type(11);
  static const int RspUpMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspUpMsg, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspUpMsg, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspUpMsg, touin_),
  };
  RspUpMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspUpMsg_descriptor_,
      RspUpMsg::default_instance_,
      RspUpMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspUpMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspUpMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspUpMsg));
  PushMsg_descriptor_ = file->message_type(12);
  static const int PushMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, fromuin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, msg_),
  };
  PushMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushMsg_descriptor_,
      PushMsg::default_instance_,
      PushMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushMsg));
  ReqPushMsgAck_descriptor_ = file->message_type(13);
  static const int ReqPushMsgAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPushMsgAck, fromuin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPushMsgAck, msgid_),
  };
  ReqPushMsgAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqPushMsgAck_descriptor_,
      ReqPushMsgAck::default_instance_,
      ReqPushMsgAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPushMsgAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPushMsgAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqPushMsgAck));
  ReqUpGrpMsg_descriptor_ = file->message_type(14);
  static const int ReqUpGrpMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUpGrpMsg, grpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUpGrpMsg, msg_),
  };
  ReqUpGrpMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqUpGrpMsg_descriptor_,
      ReqUpGrpMsg::default_instance_,
      ReqUpGrpMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUpGrpMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUpGrpMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqUpGrpMsg));
  RspUpGrpMsg_descriptor_ = file->message_type(15);
  static const int RspUpGrpMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspUpGrpMsg, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspUpGrpMsg, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspUpGrpMsg, grpid_),
  };
  RspUpGrpMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspUpGrpMsg_descriptor_,
      RspUpGrpMsg::default_instance_,
      RspUpGrpMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspUpGrpMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspUpGrpMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspUpGrpMsg));
  PushGrpMsg_descriptor_ = file->message_type(16);
  static const int PushGrpMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushGrpMsg, grpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushGrpMsg, fromuin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushGrpMsg, msg_),
  };
  PushGrpMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushGrpMsg_descriptor_,
      PushGrpMsg::default_instance_,
      PushGrpMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushGrpMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushGrpMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushGrpMsg));
  ReqPushGrpMsgAck_descriptor_ = file->message_type(17);
  static const int ReqPushGrpMsgAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPushGrpMsgAck, grpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPushGrpMsgAck, msgid_),
  };
  ReqPushGrpMsgAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqPushGrpMsgAck_descriptor_,
      ReqPushGrpMsgAck::default_instance_,
      ReqPushGrpMsgAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPushGrpMsgAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPushGrpMsgAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqPushGrpMsgAck));
  ReqOfflineMsg_descriptor_ = file->message_type(18);
  static const int ReqOfflineMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOfflineMsg, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOfflineMsg, count_),
  };
  ReqOfflineMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqOfflineMsg_descriptor_,
      ReqOfflineMsg::default_instance_,
      ReqOfflineMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOfflineMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOfflineMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqOfflineMsg));
  RspOfflineMsg_descriptor_ = file->message_type(19);
  static const int RspOfflineMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspOfflineMsg, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspOfflineMsg, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspOfflineMsg, readid_),
  };
  RspOfflineMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspOfflineMsg_descriptor_,
      RspOfflineMsg::default_instance_,
      RspOfflineMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspOfflineMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspOfflineMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspOfflineMsg));
  ReqNotice_descriptor_ = file->message_type(20);
  static const int ReqNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqNotice, noticeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqNotice, count_),
  };
  ReqNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqNotice_descriptor_,
      ReqNotice::default_instance_,
      ReqNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqNotice));
  RspNotice_descriptor_ = file->message_type(21);
  static const int RspNotice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspNotice, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspNotice, noticeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspNotice, readid_),
  };
  RspNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspNotice_descriptor_,
      RspNotice::default_instance_,
      RspNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspNotice));
  ReqNoticeAck_descriptor_ = file->message_type(22);
  static const int ReqNoticeAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqNoticeAck, noticeid_),
  };
  ReqNoticeAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqNoticeAck_descriptor_,
      ReqNoticeAck::default_instance_,
      ReqNoticeAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqNoticeAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqNoticeAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqNoticeAck));
  ReqCheckGrpMsg_descriptor_ = file->message_type(23);
  static const int ReqCheckGrpMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCheckGrpMsg, grpid_),
  };
  ReqCheckGrpMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCheckGrpMsg_descriptor_,
      ReqCheckGrpMsg::default_instance_,
      ReqCheckGrpMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCheckGrpMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCheckGrpMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCheckGrpMsg));
  GrpInfo_descriptor_ = file->message_type(24);
  static const int GrpInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrpInfo, grpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrpInfo, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrpInfo, readid_),
  };
  GrpInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GrpInfo_descriptor_,
      GrpInfo::default_instance_,
      GrpInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrpInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrpInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GrpInfo));
  RspCheckGrpMsg_descriptor_ = file->message_type(25);
  static const int RspCheckGrpMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCheckGrpMsg, grpinfo_),
  };
  RspCheckGrpMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspCheckGrpMsg_descriptor_,
      RspCheckGrpMsg::default_instance_,
      RspCheckGrpMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCheckGrpMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspCheckGrpMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspCheckGrpMsg));
  ReqGetGrpMsg_descriptor_ = file->message_type(26);
  static const int ReqGetGrpMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetGrpMsg, grpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetGrpMsg, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetGrpMsg, count_),
  };
  ReqGetGrpMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGetGrpMsg_descriptor_,
      ReqGetGrpMsg::default_instance_,
      ReqGetGrpMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetGrpMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetGrpMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGetGrpMsg));
  RspGetGrpMsg_descriptor_ = file->message_type(27);
  static const int RspGetGrpMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetGrpMsg, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetGrpMsg, msgid_),
  };
  RspGetGrpMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspGetGrpMsg_descriptor_,
      RspGetGrpMsg::default_instance_,
      RspGetGrpMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetGrpMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspGetGrpMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspGetGrpMsg));
  Cmd_descriptor_ = file->enum_type(0);
  MsgType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_donsonim_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqHeader_descriptor_, &ReqHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspHeader_descriptor_, &RspHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLogin_descriptor_, &ReqLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspLogin_descriptor_, &RspLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqHeartBeat_descriptor_, &ReqHeartBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspHeartBeat_descriptor_, &RspHeartBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqReLogin_descriptor_, &ReqReLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspReLogin_descriptor_, &RspReLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RichMsg_descriptor_, &RichMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_descriptor_, &Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqUpMsg_descriptor_, &ReqUpMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspUpMsg_descriptor_, &RspUpMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushMsg_descriptor_, &PushMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqPushMsgAck_descriptor_, &ReqPushMsgAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqUpGrpMsg_descriptor_, &ReqUpGrpMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspUpGrpMsg_descriptor_, &RspUpGrpMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushGrpMsg_descriptor_, &PushGrpMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqPushGrpMsgAck_descriptor_, &ReqPushGrpMsgAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqOfflineMsg_descriptor_, &ReqOfflineMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspOfflineMsg_descriptor_, &RspOfflineMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqNotice_descriptor_, &ReqNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspNotice_descriptor_, &RspNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqNoticeAck_descriptor_, &ReqNoticeAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCheckGrpMsg_descriptor_, &ReqCheckGrpMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GrpInfo_descriptor_, &GrpInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspCheckGrpMsg_descriptor_, &RspCheckGrpMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGetGrpMsg_descriptor_, &ReqGetGrpMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspGetGrpMsg_descriptor_, &RspGetGrpMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_donsonim_2eproto() {
  delete ReqHeader::default_instance_;
  delete ReqHeader_reflection_;
  delete RspHeader::default_instance_;
  delete RspHeader_reflection_;
  delete ReqLogin::default_instance_;
  delete ReqLogin_reflection_;
  delete RspLogin::default_instance_;
  delete RspLogin_reflection_;
  delete ReqHeartBeat::default_instance_;
  delete ReqHeartBeat_reflection_;
  delete RspHeartBeat::default_instance_;
  delete RspHeartBeat_reflection_;
  delete ReqReLogin::default_instance_;
  delete ReqReLogin_reflection_;
  delete RspReLogin::default_instance_;
  delete RspReLogin_reflection_;
  delete RichMsg::default_instance_;
  delete RichMsg_reflection_;
  delete Msg::default_instance_;
  delete Msg_reflection_;
  delete ReqUpMsg::default_instance_;
  delete ReqUpMsg_reflection_;
  delete RspUpMsg::default_instance_;
  delete RspUpMsg_reflection_;
  delete PushMsg::default_instance_;
  delete PushMsg_reflection_;
  delete ReqPushMsgAck::default_instance_;
  delete ReqPushMsgAck_reflection_;
  delete ReqUpGrpMsg::default_instance_;
  delete ReqUpGrpMsg_reflection_;
  delete RspUpGrpMsg::default_instance_;
  delete RspUpGrpMsg_reflection_;
  delete PushGrpMsg::default_instance_;
  delete PushGrpMsg_reflection_;
  delete ReqPushGrpMsgAck::default_instance_;
  delete ReqPushGrpMsgAck_reflection_;
  delete ReqOfflineMsg::default_instance_;
  delete ReqOfflineMsg_reflection_;
  delete RspOfflineMsg::default_instance_;
  delete RspOfflineMsg_reflection_;
  delete ReqNotice::default_instance_;
  delete ReqNotice_reflection_;
  delete RspNotice::default_instance_;
  delete RspNotice_reflection_;
  delete ReqNoticeAck::default_instance_;
  delete ReqNoticeAck_reflection_;
  delete ReqCheckGrpMsg::default_instance_;
  delete ReqCheckGrpMsg_reflection_;
  delete GrpInfo::default_instance_;
  delete GrpInfo_reflection_;
  delete RspCheckGrpMsg::default_instance_;
  delete RspCheckGrpMsg_reflection_;
  delete ReqGetGrpMsg::default_instance_;
  delete ReqGetGrpMsg_reflection_;
  delete RspGetGrpMsg::default_instance_;
  delete RspGetGrpMsg_reflection_;
}

void protobuf_AddDesc_donsonim_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016donsonim.proto\022\tdonson.im\"u\n\tReqHeader"
    "\022\016\n\003uin\030\001 \002(\r:\0010\022\020\n\005appid\030\002 \002(\r:\0010\022\016\n\003se"
    "q\030\003 \002(\r:\0010\022\016\n\003ver\030\004 \002(\r:\0010\022&\n\003cmd\030\005 \002(\0162"
    "\016.donson.im.Cmd:\tCMD_BEGIN\"x\n\tRspHeader\022"
    "\013\n\003ret\030\001 \002(\r\022\017\n\007message\030\002 \002(\t\022\013\n\003seq\030\003 \002"
    "(\r\022\020\n\010reserved\030\004 \001(\t\022\033\n\003cmd\030\005 \002(\0162\016.dons"
    "on.im.Cmd\022\021\n\006isPush\030\006 \002(\r:\0010\"W\n\010ReqLogin"
    "\022\020\n\010username\030\001 \002(\t\022\020\n\010password\030\002 \002(\t\022\023\n\013"
    "devicetoken\030\003 \002(\t\022\022\n\ndevicetype\030\004 \002(\r\"U\n"
    "\010RspLogin\022\r\n\005token\030\001 \001(\t\022\023\n\013apiresponse\030"
    "\002 \001(\t\022%\n\003msg\030\003 \001(\0132\030.donson.im.RspOfflin"
    "eMsg\"\035\n\014ReqHeartBeat\022\r\n\005token\030\001 \002(\t\"\035\n\014R"
    "spHeartBeat\022\r\n\005token\030\001 \001(\t\"\033\n\nReqReLogin"
    "\022\r\n\005token\030\001 \002(\t\"\033\n\nRspReLogin\022\r\n\005token\030\001"
    " \001(\t\"B\n\007RichMsg\022*\n\004type\030\001 \002(\0162\022.donson.i"
    "m.MsgType:\010Msg_Text\022\013\n\003msg\030\002 \002(\t\"H\n\003Msg\022"
    "$\n\010messages\030\001 \003(\0132\022.donson.im.RichMsg\022\r\n"
    "\005msgid\030\002 \001(\r\022\014\n\004time\030\003 \001(\r\"6\n\010ReqUpMsg\022\r"
    "\n\005touin\030\001 \002(\r\022\033\n\003msg\030\002 \002(\0132\016.donson.im.M"
    "sg\"6\n\010RspUpMsg\022\r\n\005msgid\030\001 \002(\r\022\014\n\004time\030\002 "
    "\002(\r\022\r\n\005touin\030\003 \002(\r\"7\n\007PushMsg\022\017\n\007fromuin"
    "\030\001 \002(\r\022\033\n\003msg\030\002 \002(\0132\016.donson.im.Msg\"/\n\rR"
    "eqPushMsgAck\022\017\n\007fromuin\030\001 \002(\r\022\r\n\005msgid\030\002"
    " \002(\r\"9\n\013ReqUpGrpMsg\022\r\n\005grpid\030\001 \002(\r\022\033\n\003ms"
    "g\030\002 \002(\0132\016.donson.im.Msg\"9\n\013RspUpGrpMsg\022\r"
    "\n\005msgid\030\001 \002(\r\022\014\n\004time\030\002 \002(\r\022\r\n\005grpid\030\003 \002"
    "(\r\"I\n\nPushGrpMsg\022\r\n\005grpid\030\001 \002(\r\022\017\n\007fromu"
    "in\030\002 \002(\r\022\033\n\003msg\030\003 \002(\0132\016.donson.im.Msg\"0\n"
    "\020ReqPushGrpMsgAck\022\r\n\005grpid\030\001 \002(\r\022\r\n\005msgi"
    "d\030\002 \002(\r\"4\n\rReqOfflineMsg\022\020\n\005msgid\030\001 \002(\r:"
    "\0010\022\021\n\005count\030\002 \001(\r:\00220\"T\n\rRspOfflineMsg\022$"
    "\n\010messages\030\001 \003(\0132\022.donson.im.PushMsg\022\r\n\005"
    "msgid\030\002 \001(\r\022\016\n\006readid\030\003 \001(\r\"2\n\tReqNotice"
    "\022\023\n\010noticeid\030\001 \002(\r:\0010\022\020\n\005count\030\002 \001(\r:\0015\""
    "S\n\tRspNotice\022$\n\010messages\030\001 \003(\0132\022.donson."
    "im.PushMsg\022\020\n\010noticeid\030\002 \001(\r\022\016\n\006readid\030\003"
    " \001(\r\" \n\014ReqNoticeAck\022\020\n\010noticeid\030\001 \002(\r\"\037"
    "\n\016ReqCheckGrpMsg\022\r\n\005grpid\030\001 \003(\r\"7\n\007GrpIn"
    "fo\022\r\n\005grpid\030\001 \002(\r\022\r\n\005msgid\030\002 \002(\r\022\016\n\006read"
    "id\030\003 \002(\r\"5\n\016RspCheckGrpMsg\022#\n\007grpinfo\030\001 "
    "\003(\0132\022.donson.im.GrpInfo\";\n\014ReqGetGrpMsg\022"
    "\r\n\005grpid\030\001 \002(\r\022\r\n\005msgid\030\002 \002(\r\022\r\n\005count\030\003"
    " \002(\r\"F\n\014RspGetGrpMsg\022\'\n\010messages\030\001 \003(\0132\025"
    ".donson.im.PushGrpMsg\022\r\n\005msgid\030\002 \001(\r*\227\002\n"
    "\003Cmd\022\r\n\tCMD_BEGIN\020\000\022\r\n\tCMD_LOGIN\020\001\022\017\n\013CM"
    "D_RELOGIN\020\002\022\021\n\rCMD_HEARTBEAT\020\003\022\r\n\tCMD_UP"
    "MSG\020\004\022\017\n\013CMD_PUSHMSG\020\005\022\022\n\016CMD_PUSHMSGACK"
    "\020\006\022\020\n\014CMD_UPGRPMSG\020\007\022\022\n\016CMD_PUSHGRPMSG\020\010"
    "\022\025\n\021CMD_PUSHGRPMSGACK\020\t\022\022\n\016CMD_OFFLINEMS"
    "G\020\n\022\023\n\017CMD_CHECKGRPMSG\020\013\022\021\n\rCMD_GETGRPMS"
    "G\020\014\022\016\n\nCMD_NOTICE\020\r\022\021\n\rCMD_NOTICEACK\020\016*b"
    "\n\007MsgType\022\014\n\010Msg_Text\020\000\022\013\n\007Msg_Pic\020\001\022\r\n\t"
    "Msg_Audio\020\002\022\014\n\010Msg_File\020\003\022\016\n\nMsg_Notice\020"
    "\004\022\017\n\013Msg_Offline\020\005", 2138);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "donsonim.proto", &protobuf_RegisterTypes);
  ReqHeader::default_instance_ = new ReqHeader();
  RspHeader::default_instance_ = new RspHeader();
  ReqLogin::default_instance_ = new ReqLogin();
  RspLogin::default_instance_ = new RspLogin();
  ReqHeartBeat::default_instance_ = new ReqHeartBeat();
  RspHeartBeat::default_instance_ = new RspHeartBeat();
  ReqReLogin::default_instance_ = new ReqReLogin();
  RspReLogin::default_instance_ = new RspReLogin();
  RichMsg::default_instance_ = new RichMsg();
  Msg::default_instance_ = new Msg();
  ReqUpMsg::default_instance_ = new ReqUpMsg();
  RspUpMsg::default_instance_ = new RspUpMsg();
  PushMsg::default_instance_ = new PushMsg();
  ReqPushMsgAck::default_instance_ = new ReqPushMsgAck();
  ReqUpGrpMsg::default_instance_ = new ReqUpGrpMsg();
  RspUpGrpMsg::default_instance_ = new RspUpGrpMsg();
  PushGrpMsg::default_instance_ = new PushGrpMsg();
  ReqPushGrpMsgAck::default_instance_ = new ReqPushGrpMsgAck();
  ReqOfflineMsg::default_instance_ = new ReqOfflineMsg();
  RspOfflineMsg::default_instance_ = new RspOfflineMsg();
  ReqNotice::default_instance_ = new ReqNotice();
  RspNotice::default_instance_ = new RspNotice();
  ReqNoticeAck::default_instance_ = new ReqNoticeAck();
  ReqCheckGrpMsg::default_instance_ = new ReqCheckGrpMsg();
  GrpInfo::default_instance_ = new GrpInfo();
  RspCheckGrpMsg::default_instance_ = new RspCheckGrpMsg();
  ReqGetGrpMsg::default_instance_ = new ReqGetGrpMsg();
  RspGetGrpMsg::default_instance_ = new RspGetGrpMsg();
  ReqHeader::default_instance_->InitAsDefaultInstance();
  RspHeader::default_instance_->InitAsDefaultInstance();
  ReqLogin::default_instance_->InitAsDefaultInstance();
  RspLogin::default_instance_->InitAsDefaultInstance();
  ReqHeartBeat::default_instance_->InitAsDefaultInstance();
  RspHeartBeat::default_instance_->InitAsDefaultInstance();
  ReqReLogin::default_instance_->InitAsDefaultInstance();
  RspReLogin::default_instance_->InitAsDefaultInstance();
  RichMsg::default_instance_->InitAsDefaultInstance();
  Msg::default_instance_->InitAsDefaultInstance();
  ReqUpMsg::default_instance_->InitAsDefaultInstance();
  RspUpMsg::default_instance_->InitAsDefaultInstance();
  PushMsg::default_instance_->InitAsDefaultInstance();
  ReqPushMsgAck::default_instance_->InitAsDefaultInstance();
  ReqUpGrpMsg::default_instance_->InitAsDefaultInstance();
  RspUpGrpMsg::default_instance_->InitAsDefaultInstance();
  PushGrpMsg::default_instance_->InitAsDefaultInstance();
  ReqPushGrpMsgAck::default_instance_->InitAsDefaultInstance();
  ReqOfflineMsg::default_instance_->InitAsDefaultInstance();
  RspOfflineMsg::default_instance_->InitAsDefaultInstance();
  ReqNotice::default_instance_->InitAsDefaultInstance();
  RspNotice::default_instance_->InitAsDefaultInstance();
  ReqNoticeAck::default_instance_->InitAsDefaultInstance();
  ReqCheckGrpMsg::default_instance_->InitAsDefaultInstance();
  GrpInfo::default_instance_->InitAsDefaultInstance();
  RspCheckGrpMsg::default_instance_->InitAsDefaultInstance();
  ReqGetGrpMsg::default_instance_->InitAsDefaultInstance();
  RspGetGrpMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_donsonim_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_donsonim_2eproto {
  StaticDescriptorInitializer_donsonim_2eproto() {
    protobuf_AddDesc_donsonim_2eproto();
  }
} static_descriptor_initializer_donsonim_2eproto_;

const ::google::protobuf::EnumDescriptor* Cmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cmd_descriptor_;
}
bool Cmd_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ReqHeader::kUinFieldNumber;
const int ReqHeader::kAppidFieldNumber;
const int ReqHeader::kSeqFieldNumber;
const int ReqHeader::kVerFieldNumber;
const int ReqHeader::kCmdFieldNumber;
#endif  // !_MSC_VER

ReqHeader::ReqHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqHeader::InitAsDefaultInstance() {
}

ReqHeader::ReqHeader(const ReqHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqHeader::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  appid_ = 0u;
  seq_ = 0u;
  ver_ = 0u;
  cmd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqHeader::~ReqHeader() {
  SharedDtor();
}

void ReqHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqHeader_descriptor_;
}

const ReqHeader& ReqHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_donsonim_2eproto();  return *default_instance_;
}

ReqHeader* ReqHeader::default_instance_ = NULL;

ReqHeader* ReqHeader::New() const {
  return new ReqHeader;
}

void ReqHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    appid_ = 0u;
    seq_ = 0u;
    ver_ = 0u;
    cmd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uin = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appid;
        break;
      }
      
      // required uint32 appid = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seq;
        break;
      }
      
      // required uint32 seq = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ver;
        break;
      }
      
      // required uint32 ver = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_)));
          set_has_ver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cmd;
        break;
      }
      
      // required .donson.im.Cmd cmd = 5 [default = CMD_BEGIN];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (donson::im::Cmd_IsValid(value)) {
            set_cmd(static_cast< donson::im::Cmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uin = 1 [default = 0];
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }
  
  // required uint32 appid = 2 [default = 0];
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }
  
  // required uint32 seq = 3 [default = 0];
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seq(), output);
  }
  
  // required uint32 ver = 4 [default = 0];
  if (has_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ver(), output);
  }
  
  // required .donson.im.Cmd cmd = 5 [default = CMD_BEGIN];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->cmd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uin = 1 [default = 0];
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }
  
  // required uint32 appid = 2 [default = 0];
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }
  
  // required uint32 seq = 3 [default = 0];
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seq(), target);
  }
  
  // required uint32 ver = 4 [default = 0];
  if (has_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ver(), target);
  }
  
  // required .donson.im.Cmd cmd = 5 [default = CMD_BEGIN];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->cmd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqHeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uin = 1 [default = 0];
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }
    
    // required uint32 appid = 2 [default = 0];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }
    
    // required uint32 seq = 3 [default = 0];
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }
    
    // required uint32 ver = 4 [default = 0];
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ver());
    }
    
    // required .donson.im.Cmd cmd = 5 [default = CMD_BEGIN];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqHeader::MergeFrom(const ReqHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_ver()) {
      set_ver(from.ver());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHeader::CopyFrom(const ReqHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void ReqHeader::Swap(ReqHeader* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(appid_, other->appid_);
    std::swap(seq_, other->seq_);
    std::swap(ver_, other->ver_);
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqHeader_descriptor_;
  metadata.reflection = ReqHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspHeader::kRetFieldNumber;
const int RspHeader::kMessageFieldNumber;
const int RspHeader::kSeqFieldNumber;
const int RspHeader::kReservedFieldNumber;
const int RspHeader::kCmdFieldNumber;
const int RspHeader::kIsPushFieldNumber;
#endif  // !_MSC_VER

RspHeader::RspHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspHeader::InitAsDefaultInstance() {
}

RspHeader::RspHeader(const RspHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspHeader::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seq_ = 0u;
  reserved_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cmd_ = 0;
  ispush_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspHeader::~RspHeader() {
  SharedDtor();
}

void RspHeader::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (reserved_ != &::google::protobuf::internal::kEmptyString) {
    delete reserved_;
  }
  if (this != default_instance_) {
  }
}

void RspHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspHeader_descriptor_;
}

const RspHeader& RspHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_donsonim_2eproto();  return *default_instance_;
}

RspHeader* RspHeader::default_instance_ = NULL;

RspHeader* RspHeader::New() const {
  return new RspHeader;
}

void RspHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    seq_ = 0u;
    if (has_reserved()) {
      if (reserved_ != &::google::protobuf::internal::kEmptyString) {
        reserved_->clear();
      }
    }
    cmd_ = 0;
    ispush_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }
      
      // required string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seq;
        break;
      }
      
      // required uint32 seq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reserved;
        break;
      }
      
      // optional string reserved = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reserved:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reserved()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reserved().data(), this->reserved().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cmd;
        break;
      }
      
      // required .donson.im.Cmd cmd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (donson::im::Cmd_IsValid(value)) {
            set_cmd(static_cast< donson::im::Cmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isPush;
        break;
      }
      
      // required uint32 isPush = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPush:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispush_)));
          set_has_ispush();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }
  
  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }
  
  // required uint32 seq = 3;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seq(), output);
  }
  
  // optional string reserved = 4;
  if (has_reserved()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reserved().data(), this->reserved().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->reserved(), output);
  }
  
  // required .donson.im.Cmd cmd = 5;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->cmd(), output);
  }
  
  // required uint32 isPush = 6 [default = 0];
  if (has_ispush()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ispush(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }
  
  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }
  
  // required uint32 seq = 3;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seq(), target);
  }
  
  // optional string reserved = 4;
  if (has_reserved()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reserved().data(), this->reserved().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->reserved(), target);
  }
  
  // required .donson.im.Cmd cmd = 5;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->cmd(), target);
  }
  
  // required uint32 isPush = 6 [default = 0];
  if (has_ispush()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ispush(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspHeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }
    
    // required string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
    // required uint32 seq = 3;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }
    
    // optional string reserved = 4;
    if (has_reserved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reserved());
    }
    
    // required .donson.im.Cmd cmd = 5;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }
    
    // required uint32 isPush = 6 [default = 0];
    if (has_ispush()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispush());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspHeader::MergeFrom(const RspHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_reserved()) {
      set_reserved(from.reserved());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_ispush()) {
      set_ispush(from.ispush());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspHeader::CopyFrom(const RspHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;
  
  return true;
}

void RspHeader::Swap(RspHeader* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(message_, other->message_);
    std::swap(seq_, other->seq_);
    std::swap(reserved_, other->reserved_);
    std::swap(cmd_, other->cmd_);
    std::swap(ispush_, other->ispush_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspHeader_descriptor_;
  metadata.reflection = RspHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqLogin::kUsernameFieldNumber;
const int ReqLogin::kPasswordFieldNumber;
const int ReqLogin::kDevicetokenFieldNumber;
const int ReqLogin::kDevicetypeFieldNumber;
#endif  // !_MSC_VER

ReqLogin::ReqLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqLogin::InitAsDefaultInstance() {
}

ReqLogin::ReqLogin(const ReqLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqLogin::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devicetoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devicetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLogin::~ReqLogin() {
  SharedDtor();
}

void ReqLogin::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (devicetoken_ != &::google::protobuf::internal::kEmptyString) {
    delete devicetoken_;
  }
  if (this != default_instance_) {
  }
}

void ReqLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLogin_descriptor_;
}

const ReqLogin& ReqLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_donsonim_2eproto();  return *default_instance_;
}

ReqLogin* ReqLogin::default_instance_ = NULL;

ReqLogin* ReqLogin::New() const {
  return new ReqLogin;
}

void ReqLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_devicetoken()) {
      if (devicetoken_ != &::google::protobuf::internal::kEmptyString) {
        devicetoken_->clear();
      }
    }
    devicetype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }
      
      // required string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_devicetoken;
        break;
      }
      
      // required string devicetoken = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_devicetoken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicetoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devicetoken().data(), this->devicetoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_devicetype;
        break;
      }
      
      // required uint32 devicetype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_devicetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &devicetype_)));
          set_has_devicetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }
  
  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }
  
  // required string devicetoken = 3;
  if (has_devicetoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicetoken().data(), this->devicetoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->devicetoken(), output);
  }
  
  // required uint32 devicetype = 4;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->devicetype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }
  
  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }
  
  // required string devicetoken = 3;
  if (has_devicetoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicetoken().data(), this->devicetoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->devicetoken(), target);
  }
  
  // required uint32 devicetype = 4;
  if (has_devicetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->devicetype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqLogin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // required string devicetoken = 3;
    if (has_devicetoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicetoken());
    }
    
    // required uint32 devicetype = 4;
    if (has_devicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->devicetype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLogin::MergeFrom(const ReqLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_devicetoken()) {
      set_devicetoken(from.devicetoken());
    }
    if (from.has_devicetype()) {
      set_devicetype(from.devicetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLogin::CopyFrom(const ReqLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void ReqLogin::Swap(ReqLogin* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(devicetoken_, other->devicetoken_);
    std::swap(devicetype_, other->devicetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLogin_descriptor_;
  metadata.reflection = ReqLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspLogin::kTokenFieldNumber;
const int RspLogin::kApiresponseFieldNumber;
const int RspLogin::kMsgFieldNumber;
#endif  // !_MSC_VER

RspLogin::RspLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspLogin::InitAsDefaultInstance() {
  msg_ = const_cast< ::donson::im::RspOfflineMsg*>(&::donson::im::RspOfflineMsg::default_instance());
}

RspLogin::RspLogin(const RspLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspLogin::SharedCtor() {
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  apiresponse_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspLogin::~RspLogin() {
  SharedDtor();
}

void RspLogin::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (apiresponse_ != &::google::protobuf::internal::kEmptyString) {
    delete apiresponse_;
  }
  if (this != default_instance_) {
    delete msg_;
  }
}

void RspLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspLogin_descriptor_;
}

const RspLogin& RspLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_donsonim_2eproto();  return *default_instance_;
}

RspLogin* RspLogin::default_instance_ = NULL;

RspLogin* RspLogin::New() const {
  return new RspLogin;
}

void RspLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_apiresponse()) {
      if (apiresponse_ != &::google::protobuf::internal::kEmptyString) {
        apiresponse_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != NULL) msg_->::donson::im::RspOfflineMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_apiresponse;
        break;
      }
      
      // optional string apiresponse = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apiresponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apiresponse()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->apiresponse().data(), this->apiresponse().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }
      
      // optional .donson.im.RspOfflineMsg msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->token(), output);
  }
  
  // optional string apiresponse = 2;
  if (has_apiresponse()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apiresponse().data(), this->apiresponse().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->apiresponse(), output);
  }
  
  // optional .donson.im.RspOfflineMsg msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }
  
  // optional string apiresponse = 2;
  if (has_apiresponse()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apiresponse().data(), this->apiresponse().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->apiresponse(), target);
  }
  
  // optional .donson.im.RspOfflineMsg msg = 3;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspLogin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
    // optional string apiresponse = 2;
    if (has_apiresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->apiresponse());
    }
    
    // optional .donson.im.RspOfflineMsg msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspLogin::MergeFrom(const RspLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_apiresponse()) {
      set_apiresponse(from.apiresponse());
    }
    if (from.has_msg()) {
      mutable_msg()->::donson::im::RspOfflineMsg::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspLogin::CopyFrom(const RspLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspLogin::IsInitialized() const {
  
  if (has_msg()) {
    if (!this->msg().IsInitialized()) return false;
  }
  return true;
}

void RspLogin::Swap(RspLogin* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(apiresponse_, other->apiresponse_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspLogin_descriptor_;
  metadata.reflection = RspLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqHeartBeat::kTokenFieldNumber;
#endif  // !_MSC_VER

ReqHeartBeat::ReqHeartBeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqHeartBeat::InitAsDefaultInstance() {
}

ReqHeartBeat::ReqHeartBeat(const ReqHeartBeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqHeartBeat::SharedCtor() {
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqHeartBeat::~ReqHeartBeat() {
  SharedDtor();
}

void ReqHeartBeat::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void ReqHeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqHeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqHeartBeat_descriptor_;
}

const ReqHeartBeat& ReqHeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_donsonim_2eproto();  return *default_instance_;
}

ReqHeartBeat* ReqHeartBeat::default_instance_ = NULL;

ReqHeartBeat* ReqHeartBeat::New() const {
  return new ReqHeartBeat;
}

void ReqHeartBeat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqHeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqHeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->token(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqHeartBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqHeartBeat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqHeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqHeartBeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqHeartBeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqHeartBeat::MergeFrom(const ReqHeartBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqHeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHeartBeat::CopyFrom(const ReqHeartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHeartBeat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReqHeartBeat::Swap(ReqHeartBeat* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqHeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqHeartBeat_descriptor_;
  metadata.reflection = ReqHeartBeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspHeartBeat::kTokenFieldNumber;
#endif  // !_MSC_VER

RspHeartBeat::RspHeartBeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspHeartBeat::InitAsDefaultInstance() {
}

RspHeartBeat::RspHeartBeat(const RspHeartBeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspHeartBeat::SharedCtor() {
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspHeartBeat::~RspHeartBeat() {
  SharedDtor();
}

void RspHeartBeat::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void RspHeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspHeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspHeartBeat_descriptor_;
}

const RspHeartBeat& RspHeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_donsonim_2eproto();  return *default_instance_;
}

RspHeartBeat* RspHeartBeat::default_instance_ = NULL;

RspHeartBeat* RspHeartBeat::New() const {
  return new RspHeartBeat;
}

void RspHeartBeat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspHeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspHeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->token(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspHeartBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspHeartBeat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspHeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspHeartBeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspHeartBeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspHeartBeat::MergeFrom(const RspHeartBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspHeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspHeartBeat::CopyFrom(const RspHeartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspHeartBeat::IsInitialized() const {
  
  return true;
}

void RspHeartBeat::Swap(RspHeartBeat* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspHeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspHeartBeat_descriptor_;
  metadata.reflection = RspHeartBeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqReLogin::kTokenFieldNumber;
#endif  // !_MSC_VER

ReqReLogin::ReqReLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqReLogin::InitAsDefaultInstance() {
}

ReqReLogin::ReqReLogin(const ReqReLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqReLogin::SharedCtor() {
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqReLogin::~ReqReLogin() {
  SharedDtor();
}

void ReqReLogin::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void ReqReLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqReLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqReLogin_descriptor_;
}

const ReqReLogin& ReqReLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_donsonim_2eproto();  return *default_instance_;
}

ReqReLogin* ReqReLogin::default_instance_ = NULL;

ReqReLogin* ReqReLogin::New() const {
  return new ReqReLogin;
}

void ReqReLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqReLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqReLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->token(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqReLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqReLogin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqReLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqReLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqReLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqReLogin::MergeFrom(const ReqReLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqReLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqReLogin::CopyFrom(const ReqReLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqReLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReqReLogin::Swap(ReqReLogin* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqReLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqReLogin_descriptor_;
  metadata.reflection = ReqReLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspReLogin::kTokenFieldNumber;
#endif  // !_MSC_VER

RspReLogin::RspReLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspReLogin::InitAsDefaultInstance() {
}

RspReLogin::RspReLogin(const RspReLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspReLogin::SharedCtor() {
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspReLogin::~RspReLogin() {
  SharedDtor();
}

void RspReLogin::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void RspReLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspReLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspReLogin_descriptor_;
}

const RspReLogin& RspReLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_donsonim_2eproto();  return *default_instance_;
}

RspReLogin* RspReLogin::default_instance_ = NULL;

RspReLogin* RspReLogin::New() const {
  return new RspReLogin;
}

void RspReLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspReLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspReLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->token(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspReLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspReLogin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspReLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspReLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspReLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspReLogin::MergeFrom(const RspReLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspReLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspReLogin::CopyFrom(const RspReLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspReLogin::IsInitialized() const {
  
  return true;
}

void RspReLogin::Swap(RspReLogin* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspReLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspReLogin_descriptor_;
  metadata.reflection = RspReLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RichMsg::kTypeFieldNumber;
const int RichMsg::kMsgFieldNumber;
#endif  // !_MSC_VER

RichMsg::RichMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RichMsg::InitAsDefaultInstance() {
}

RichMsg::RichMsg(const RichMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RichMsg::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RichMsg::~RichMsg() {
  SharedDtor();
}

void RichMsg::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void RichMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RichMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RichMsg_descriptor_;
}

const RichMsg& RichMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_donsonim_2eproto();  return *default_instance_;
}

RichMsg* RichMsg::default_instance_ = NULL;

RichMsg* RichMsg::New() const {
  return new RichMsg;
}

void RichMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RichMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .donson.im.MsgType type = 1 [default = Msg_Text];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (donson::im::MsgType_IsValid(value)) {
            set_type(static_cast< donson::im::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // required string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RichMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .donson.im.MsgType type = 1 [default = Msg_Text];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RichMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .donson.im.MsgType type = 1 [default = Msg_Text];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RichMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .donson.im.MsgType type = 1 [default = Msg_Text];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RichMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RichMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RichMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RichMsg::MergeFrom(const RichMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RichMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RichMsg::CopyFrom(const RichMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RichMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RichMsg::Swap(RichMsg* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RichMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RichMsg_descriptor_;
  metadata.reflection = RichMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg::kMessagesFieldNumber;
const int Msg::kMsgidFieldNumber;
const int Msg::kTimeFieldNumber;
#endif  // !_MSC_VER

Msg::Msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg::InitAsDefaultInstance() {
}

Msg::Msg(const Msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg::~Msg() {
  SharedDtor();
}

void Msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_descriptor_;
}

const Msg& Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_donsonim_2eproto();  return *default_instance_;
}

Msg* Msg::default_instance_ = NULL;

Msg* Msg::New() const {
  return new Msg;
}

void Msg::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    msgid_ = 0u;
    time_ = 0u;
  }
  messages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .donson.im.RichMsg messages = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_messages;
        if (input->ExpectTag(16)) goto parse_msgid;
        break;
      }
      
      // optional uint32 msgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }
      
      // optional uint32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .donson.im.RichMsg messages = 1;
  for (int i = 0; i < this->messages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->messages(i), output);
  }
  
  // optional uint32 msgid = 2;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msgid(), output);
  }
  
  // optional uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .donson.im.RichMsg messages = 1;
  for (int i = 0; i < this->messages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->messages(i), target);
  }
  
  // optional uint32 msgid = 2;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msgid(), target);
  }
  
  // optional uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 msgid = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }
    
    // optional uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  // repeated .donson.im.RichMsg messages = 1;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg::MergeFrom(const Msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  messages_.MergeFrom(from.messages_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg::CopyFrom(const Msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg::IsInitialized() const {
  
  for (int i = 0; i < messages_size(); i++) {
    if (!this->messages(i).IsInitialized()) return false;
  }
  return true;
}

void Msg::Swap(Msg* other) {
  if (other != this) {
    messages_.Swap(&other->messages_);
    std::swap(msgid_, other->msgid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_descriptor_;
  metadata.reflection = Msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqUpMsg::kTouinFieldNumber;
const int ReqUpMsg::kMsgFieldNumber;
#endif  // !_MSC_VER

ReqUpMsg::ReqUpMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqUpMsg::InitAsDefaultInstance() {
  msg_ = const_cast< ::donson::im::Msg*>(&::donson::im::Msg::default_instance());
}

ReqUpMsg::ReqUpMsg(const ReqUpMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqUpMsg::SharedCtor() {
  _cached_size_ = 0;
  touin_ = 0u;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqUpMsg::~ReqUpMsg() {
  SharedDtor();
}

void ReqUpMsg::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void ReqUpMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqUpMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqUpMsg_descriptor_;
}

const ReqUpMsg& ReqUpMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_donsonim_2eproto();  return *default_instance_;
}

ReqUpMsg* ReqUpMsg::default_instance_ = NULL;

ReqUpMsg* ReqUpMsg::New() const {
  return new ReqUpMsg;
}

void ReqUpMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    touin_ = 0u;
    if (has_msg()) {
      if (msg_ != NULL) msg_->::donson::im::Msg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqUpMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 touin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &touin_)));
          set_has_touin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // required .donson.im.Msg msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqUpMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 touin = 1;
  if (has_touin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->touin(), output);
  }
  
  // required .donson.im.Msg msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqUpMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 touin = 1;
  if (has_touin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->touin(), target);
  }
  
  // required .donson.im.Msg msg = 2;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqUpMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 touin = 1;
    if (has_touin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->touin());
    }
    
    // required .donson.im.Msg msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqUpMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqUpMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqUpMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqUpMsg::MergeFrom(const ReqUpMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_touin()) {
      set_touin(from.touin());
    }
    if (from.has_msg()) {
      mutable_msg()->::donson::im::Msg::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqUpMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUpMsg::CopyFrom(const ReqUpMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUpMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_msg()) {
    if (!this->msg().IsInitialized()) return false;
  }
  return true;
}

void ReqUpMsg::Swap(ReqUpMsg* other) {
  if (other != this) {
    std::swap(touin_, other->touin_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqUpMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqUpMsg_descriptor_;
  metadata.reflection = ReqUpMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspUpMsg::kMsgidFieldNumber;
const int RspUpMsg::kTimeFieldNumber;
const int RspUpMsg::kTouinFieldNumber;
#endif  // !_MSC_VER

RspUpMsg::RspUpMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspUpMsg::InitAsDefaultInstance() {
}

RspUpMsg::RspUpMsg(const RspUpMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspUpMsg::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0u;
  time_ = 0u;
  touin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspUpMsg::~RspUpMsg() {
  SharedDtor();
}

void RspUpMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspUpMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspUpMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspUpMsg_descriptor_;
}

const RspUpMsg& RspUpMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_donsonim_2eproto();  return *default_instance_;
}

RspUpMsg* RspUpMsg::default_instance_ = NULL;

RspUpMsg* RspUpMsg::New() const {
  return new RspUpMsg;
}

void RspUpMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0u;
    time_ = 0u;
    touin_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspUpMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 msgid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }
      
      // required uint32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_touin;
        break;
      }
      
      // required uint32 touin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_touin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &touin_)));
          set_has_touin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspUpMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 msgid = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgid(), output);
  }
  
  // required uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }
  
  // required uint32 touin = 3;
  if (has_touin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->touin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspUpMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 msgid = 1;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgid(), target);
  }
  
  // required uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }
  
  // required uint32 touin = 3;
  if (has_touin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->touin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspUpMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 msgid = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }
    
    // required uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
    // required uint32 touin = 3;
    if (has_touin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->touin());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspUpMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspUpMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspUpMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspUpMsg::MergeFrom(const RspUpMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_touin()) {
      set_touin(from.touin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspUpMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspUpMsg::CopyFrom(const RspUpMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspUpMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void RspUpMsg::Swap(RspUpMsg* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(time_, other->time_);
    std::swap(touin_, other->touin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspUpMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspUpMsg_descriptor_;
  metadata.reflection = RspUpMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushMsg::kFromuinFieldNumber;
const int PushMsg::kMsgFieldNumber;
#endif  // !_MSC_VER

PushMsg::PushMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushMsg::InitAsDefaultInstance() {
  msg_ = const_cast< ::donson::im::Msg*>(&::donson::im::Msg::default_instance());
}

PushMsg::PushMsg(const PushMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushMsg::SharedCtor() {
  _cached_size_ = 0;
  fromuin_ = 0u;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushMsg::~PushMsg() {
  SharedDtor();
}

void PushMsg::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void PushMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushMsg_descriptor_;
}

const PushMsg& PushMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_donsonim_2eproto();  return *default_instance_;
}

PushMsg* PushMsg::default_instance_ = NULL;

PushMsg* PushMsg::New() const {
  return new PushMsg;
}

void PushMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fromuin_ = 0u;
    if (has_msg()) {
      if (msg_ != NULL) msg_->::donson::im::Msg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 fromuin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromuin_)));
          set_has_fromuin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // required .donson.im.Msg msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 fromuin = 1;
  if (has_fromuin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fromuin(), output);
  }
  
  // required .donson.im.Msg msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 fromuin = 1;
  if (has_fromuin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fromuin(), target);
  }
  
  // required .donson.im.Msg msg = 2;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 fromuin = 1;
    if (has_fromuin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromuin());
    }
    
    // required .donson.im.Msg msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushMsg::MergeFrom(const PushMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromuin()) {
      set_fromuin(from.fromuin());
    }
    if (from.has_msg()) {
      mutable_msg()->::donson::im::Msg::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushMsg::CopyFrom(const PushMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_msg()) {
    if (!this->msg().IsInitialized()) return false;
  }
  return true;
}

void PushMsg::Swap(PushMsg* other) {
  if (other != this) {
    std::swap(fromuin_, other->fromuin_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushMsg_descriptor_;
  metadata.reflection = PushMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqPushMsgAck::kFromuinFieldNumber;
const int ReqPushMsgAck::kMsgidFieldNumber;
#endif  // !_MSC_VER

ReqPushMsgAck::ReqPushMsgAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqPushMsgAck::InitAsDefaultInstance() {
}

ReqPushMsgAck::ReqPushMsgAck(const ReqPushMsgAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqPushMsgAck::SharedCtor() {
  _cached_size_ = 0;
  fromuin_ = 0u;
  msgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqPushMsgAck::~ReqPushMsgAck() {
  SharedDtor();
}

void ReqPushMsgAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqPushMsgAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqPushMsgAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqPushMsgAck_descriptor_;
}

const ReqPushMsgAck& ReqPushMsgAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_donsonim_2eproto();  return *default_instance_;
}

ReqPushMsgAck* ReqPushMsgAck::default_instance_ = NULL;

ReqPushMsgAck* ReqPushMsgAck::New() const {
  return new ReqPushMsgAck;
}

void ReqPushMsgAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fromuin_ = 0u;
    msgid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqPushMsgAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 fromuin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromuin_)));
          set_has_fromuin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msgid;
        break;
      }
      
      // required uint32 msgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqPushMsgAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 fromuin = 1;
  if (has_fromuin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fromuin(), output);
  }
  
  // required uint32 msgid = 2;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqPushMsgAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 fromuin = 1;
  if (has_fromuin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fromuin(), target);
  }
  
  // required uint32 msgid = 2;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqPushMsgAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 fromuin = 1;
    if (has_fromuin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromuin());
    }
    
    // required uint32 msgid = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqPushMsgAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqPushMsgAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqPushMsgAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqPushMsgAck::MergeFrom(const ReqPushMsgAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromuin()) {
      set_fromuin(from.fromuin());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqPushMsgAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPushMsgAck::CopyFrom(const ReqPushMsgAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPushMsgAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ReqPushMsgAck::Swap(ReqPushMsgAck* other) {
  if (other != this) {
    std::swap(fromuin_, other->fromuin_);
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqPushMsgAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqPushMsgAck_descriptor_;
  metadata.reflection = ReqPushMsgAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqUpGrpMsg::kGrpidFieldNumber;
const int ReqUpGrpMsg::kMsgFieldNumber;
#endif  // !_MSC_VER

ReqUpGrpMsg::ReqUpGrpMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqUpGrpMsg::InitAsDefaultInstance() {
  msg_ = const_cast< ::donson::im::Msg*>(&::donson::im::Msg::default_instance());
}

ReqUpGrpMsg::ReqUpGrpMsg(const ReqUpGrpMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqUpGrpMsg::SharedCtor() {
  _cached_size_ = 0;
  grpid_ = 0u;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqUpGrpMsg::~ReqUpGrpMsg() {
  SharedDtor();
}

void ReqUpGrpMsg::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void ReqUpGrpMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqUpGrpMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqUpGrpMsg_descriptor_;
}

const ReqUpGrpMsg& ReqUpGrpMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_donsonim_2eproto();  return *default_instance_;
}

ReqUpGrpMsg* ReqUpGrpMsg::default_instance_ = NULL;

ReqUpGrpMsg* ReqUpGrpMsg::New() const {
  return new ReqUpGrpMsg;
}

void ReqUpGrpMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grpid_ = 0u;
    if (has_msg()) {
      if (msg_ != NULL) msg_->::donson::im::Msg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqUpGrpMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 grpid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grpid_)));
          set_has_grpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // required .donson.im.Msg msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqUpGrpMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 grpid = 1;
  if (has_grpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->grpid(), output);
  }
  
  // required .donson.im.Msg msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqUpGrpMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 grpid = 1;
  if (has_grpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->grpid(), target);
  }
  
  // required .donson.im.Msg msg = 2;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqUpGrpMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 grpid = 1;
    if (has_grpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grpid());
    }
    
    // required .donson.im.Msg msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqUpGrpMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqUpGrpMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqUpGrpMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqUpGrpMsg::MergeFrom(const ReqUpGrpMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grpid()) {
      set_grpid(from.grpid());
    }
    if (from.has_msg()) {
      mutable_msg()->::donson::im::Msg::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqUpGrpMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUpGrpMsg::CopyFrom(const ReqUpGrpMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUpGrpMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_msg()) {
    if (!this->msg().IsInitialized()) return false;
  }
  return true;
}

void ReqUpGrpMsg::Swap(ReqUpGrpMsg* other) {
  if (other != this) {
    std::swap(grpid_, other->grpid_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqUpGrpMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqUpGrpMsg_descriptor_;
  metadata.reflection = ReqUpGrpMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspUpGrpMsg::kMsgidFieldNumber;
const int RspUpGrpMsg::kTimeFieldNumber;
const int RspUpGrpMsg::kGrpidFieldNumber;
#endif  // !_MSC_VER

RspUpGrpMsg::RspUpGrpMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspUpGrpMsg::InitAsDefaultInstance() {
}

RspUpGrpMsg::RspUpGrpMsg(const RspUpGrpMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspUpGrpMsg::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0u;
  time_ = 0u;
  grpid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspUpGrpMsg::~RspUpGrpMsg() {
  SharedDtor();
}

void RspUpGrpMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspUpGrpMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspUpGrpMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspUpGrpMsg_descriptor_;
}

const RspUpGrpMsg& RspUpGrpMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_donsonim_2eproto();  return *default_instance_;
}

RspUpGrpMsg* RspUpGrpMsg::default_instance_ = NULL;

RspUpGrpMsg* RspUpGrpMsg::New() const {
  return new RspUpGrpMsg;
}

void RspUpGrpMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0u;
    time_ = 0u;
    grpid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspUpGrpMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 msgid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }
      
      // required uint32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_grpid;
        break;
      }
      
      // required uint32 grpid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grpid_)));
          set_has_grpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspUpGrpMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 msgid = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgid(), output);
  }
  
  // required uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }
  
  // required uint32 grpid = 3;
  if (has_grpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->grpid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspUpGrpMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 msgid = 1;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgid(), target);
  }
  
  // required uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }
  
  // required uint32 grpid = 3;
  if (has_grpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->grpid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspUpGrpMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 msgid = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }
    
    // required uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
    // required uint32 grpid = 3;
    if (has_grpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grpid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspUpGrpMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspUpGrpMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspUpGrpMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspUpGrpMsg::MergeFrom(const RspUpGrpMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_grpid()) {
      set_grpid(from.grpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspUpGrpMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspUpGrpMsg::CopyFrom(const RspUpGrpMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspUpGrpMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void RspUpGrpMsg::Swap(RspUpGrpMsg* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(time_, other->time_);
    std::swap(grpid_, other->grpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspUpGrpMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspUpGrpMsg_descriptor_;
  metadata.reflection = RspUpGrpMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushGrpMsg::kGrpidFieldNumber;
const int PushGrpMsg::kFromuinFieldNumber;
const int PushGrpMsg::kMsgFieldNumber;
#endif  // !_MSC_VER

PushGrpMsg::PushGrpMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushGrpMsg::InitAsDefaultInstance() {
  msg_ = const_cast< ::donson::im::Msg*>(&::donson::im::Msg::default_instance());
}

PushGrpMsg::PushGrpMsg(const PushGrpMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushGrpMsg::SharedCtor() {
  _cached_size_ = 0;
  grpid_ = 0u;
  fromuin_ = 0u;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushGrpMsg::~PushGrpMsg() {
  SharedDtor();
}

void PushGrpMsg::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void PushGrpMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushGrpMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushGrpMsg_descriptor_;
}

const PushGrpMsg& PushGrpMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_donsonim_2eproto();  return *default_instance_;
}

PushGrpMsg* PushGrpMsg::default_instance_ = NULL;

PushGrpMsg* PushGrpMsg::New() const {
  return new PushGrpMsg;
}

void PushGrpMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grpid_ = 0u;
    fromuin_ = 0u;
    if (has_msg()) {
      if (msg_ != NULL) msg_->::donson::im::Msg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushGrpMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 grpid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grpid_)));
          set_has_grpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fromuin;
        break;
      }
      
      // required uint32 fromuin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fromuin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromuin_)));
          set_has_fromuin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }
      
      // required .donson.im.Msg msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushGrpMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 grpid = 1;
  if (has_grpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->grpid(), output);
  }
  
  // required uint32 fromuin = 2;
  if (has_fromuin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fromuin(), output);
  }
  
  // required .donson.im.Msg msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushGrpMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 grpid = 1;
  if (has_grpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->grpid(), target);
  }
  
  // required uint32 fromuin = 2;
  if (has_fromuin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fromuin(), target);
  }
  
  // required .donson.im.Msg msg = 3;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushGrpMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 grpid = 1;
    if (has_grpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grpid());
    }
    
    // required uint32 fromuin = 2;
    if (has_fromuin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromuin());
    }
    
    // required .donson.im.Msg msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushGrpMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushGrpMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushGrpMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushGrpMsg::MergeFrom(const PushGrpMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grpid()) {
      set_grpid(from.grpid());
    }
    if (from.has_fromuin()) {
      set_fromuin(from.fromuin());
    }
    if (from.has_msg()) {
      mutable_msg()->::donson::im::Msg::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushGrpMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushGrpMsg::CopyFrom(const PushGrpMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushGrpMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_msg()) {
    if (!this->msg().IsInitialized()) return false;
  }
  return true;
}

void PushGrpMsg::Swap(PushGrpMsg* other) {
  if (other != this) {
    std::swap(grpid_, other->grpid_);
    std::swap(fromuin_, other->fromuin_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushGrpMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushGrpMsg_descriptor_;
  metadata.reflection = PushGrpMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqPushGrpMsgAck::kGrpidFieldNumber;
const int ReqPushGrpMsgAck::kMsgidFieldNumber;
#endif  // !_MSC_VER

ReqPushGrpMsgAck::ReqPushGrpMsgAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqPushGrpMsgAck::InitAsDefaultInstance() {
}

ReqPushGrpMsgAck::ReqPushGrpMsgAck(const ReqPushGrpMsgAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqPushGrpMsgAck::SharedCtor() {
  _cached_size_ = 0;
  grpid_ = 0u;
  msgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqPushGrpMsgAck::~ReqPushGrpMsgAck() {
  SharedDtor();
}

void ReqPushGrpMsgAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqPushGrpMsgAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqPushGrpMsgAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqPushGrpMsgAck_descriptor_;
}

const ReqPushGrpMsgAck& ReqPushGrpMsgAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_donsonim_2eproto();  return *default_instance_;
}

ReqPushGrpMsgAck* ReqPushGrpMsgAck::default_instance_ = NULL;

ReqPushGrpMsgAck* ReqPushGrpMsgAck::New() const {
  return new ReqPushGrpMsgAck;
}

void ReqPushGrpMsgAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grpid_ = 0u;
    msgid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqPushGrpMsgAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 grpid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grpid_)));
          set_has_grpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msgid;
        break;
      }
      
      // required uint32 msgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqPushGrpMsgAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 grpid = 1;
  if (has_grpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->grpid(), output);
  }
  
  // required uint32 msgid = 2;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqPushGrpMsgAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 grpid = 1;
  if (has_grpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->grpid(), target);
  }
  
  // required uint32 msgid = 2;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqPushGrpMsgAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 grpid = 1;
    if (has_grpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grpid());
    }
    
    // required uint32 msgid = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqPushGrpMsgAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqPushGrpMsgAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqPushGrpMsgAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqPushGrpMsgAck::MergeFrom(const ReqPushGrpMsgAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grpid()) {
      set_grpid(from.grpid());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqPushGrpMsgAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPushGrpMsgAck::CopyFrom(const ReqPushGrpMsgAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPushGrpMsgAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ReqPushGrpMsgAck::Swap(ReqPushGrpMsgAck* other) {
  if (other != this) {
    std::swap(grpid_, other->grpid_);
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqPushGrpMsgAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqPushGrpMsgAck_descriptor_;
  metadata.reflection = ReqPushGrpMsgAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqOfflineMsg::kMsgidFieldNumber;
const int ReqOfflineMsg::kCountFieldNumber;
#endif  // !_MSC_VER

ReqOfflineMsg::ReqOfflineMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqOfflineMsg::InitAsDefaultInstance() {
}

ReqOfflineMsg::ReqOfflineMsg(const ReqOfflineMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqOfflineMsg::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0u;
  count_ = 20u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqOfflineMsg::~ReqOfflineMsg() {
  SharedDtor();
}

void ReqOfflineMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqOfflineMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqOfflineMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOfflineMsg_descriptor_;
}

const ReqOfflineMsg& ReqOfflineMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_donsonim_2eproto();  return *default_instance_;
}

ReqOfflineMsg* ReqOfflineMsg::default_instance_ = NULL;

ReqOfflineMsg* ReqOfflineMsg::New() const {
  return new ReqOfflineMsg;
}

void ReqOfflineMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0u;
    count_ = 20u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqOfflineMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 msgid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 2 [default = 20];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqOfflineMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 msgid = 1 [default = 0];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgid(), output);
  }
  
  // optional uint32 count = 2 [default = 20];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqOfflineMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 msgid = 1 [default = 0];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgid(), target);
  }
  
  // optional uint32 count = 2 [default = 20];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqOfflineMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 msgid = 1 [default = 0];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }
    
    // optional uint32 count = 2 [default = 20];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqOfflineMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqOfflineMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqOfflineMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqOfflineMsg::MergeFrom(const ReqOfflineMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqOfflineMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqOfflineMsg::CopyFrom(const ReqOfflineMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOfflineMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReqOfflineMsg::Swap(ReqOfflineMsg* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqOfflineMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqOfflineMsg_descriptor_;
  metadata.reflection = ReqOfflineMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspOfflineMsg::kMessagesFieldNumber;
const int RspOfflineMsg::kMsgidFieldNumber;
const int RspOfflineMsg::kReadidFieldNumber;
#endif  // !_MSC_VER

RspOfflineMsg::RspOfflineMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspOfflineMsg::InitAsDefaultInstance() {
}

RspOfflineMsg::RspOfflineMsg(const RspOfflineMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspOfflineMsg::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0u;
  readid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspOfflineMsg::~RspOfflineMsg() {
  SharedDtor();
}

void RspOfflineMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspOfflineMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspOfflineMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspOfflineMsg_descriptor_;
}

const RspOfflineMsg& RspOfflineMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_donsonim_2eproto();  return *default_instance_;
}

RspOfflineMsg* RspOfflineMsg::default_instance_ = NULL;

RspOfflineMsg* RspOfflineMsg::New() const {
  return new RspOfflineMsg;
}

void RspOfflineMsg::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    msgid_ = 0u;
    readid_ = 0u;
  }
  messages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspOfflineMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .donson.im.PushMsg messages = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_messages;
        if (input->ExpectTag(16)) goto parse_msgid;
        break;
      }
      
      // optional uint32 msgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_readid;
        break;
      }
      
      // optional uint32 readid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_readid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &readid_)));
          set_has_readid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspOfflineMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .donson.im.PushMsg messages = 1;
  for (int i = 0; i < this->messages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->messages(i), output);
  }
  
  // optional uint32 msgid = 2;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msgid(), output);
  }
  
  // optional uint32 readid = 3;
  if (has_readid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->readid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspOfflineMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .donson.im.PushMsg messages = 1;
  for (int i = 0; i < this->messages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->messages(i), target);
  }
  
  // optional uint32 msgid = 2;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msgid(), target);
  }
  
  // optional uint32 readid = 3;
  if (has_readid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->readid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspOfflineMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 msgid = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }
    
    // optional uint32 readid = 3;
    if (has_readid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->readid());
    }
    
  }
  // repeated .donson.im.PushMsg messages = 1;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspOfflineMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspOfflineMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspOfflineMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspOfflineMsg::MergeFrom(const RspOfflineMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  messages_.MergeFrom(from.messages_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_readid()) {
      set_readid(from.readid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspOfflineMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspOfflineMsg::CopyFrom(const RspOfflineMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspOfflineMsg::IsInitialized() const {
  
  for (int i = 0; i < messages_size(); i++) {
    if (!this->messages(i).IsInitialized()) return false;
  }
  return true;
}

void RspOfflineMsg::Swap(RspOfflineMsg* other) {
  if (other != this) {
    messages_.Swap(&other->messages_);
    std::swap(msgid_, other->msgid_);
    std::swap(readid_, other->readid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspOfflineMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspOfflineMsg_descriptor_;
  metadata.reflection = RspOfflineMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqNotice::kNoticeidFieldNumber;
const int ReqNotice::kCountFieldNumber;
#endif  // !_MSC_VER

ReqNotice::ReqNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqNotice::InitAsDefaultInstance() {
}

ReqNotice::ReqNotice(const ReqNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqNotice::SharedCtor() {
  _cached_size_ = 0;
  noticeid_ = 0u;
  count_ = 5u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqNotice::~ReqNotice() {
  SharedDtor();
}

void ReqNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqNotice_descriptor_;
}

const ReqNotice& ReqNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_donsonim_2eproto();  return *default_instance_;
}

ReqNotice* ReqNotice::default_instance_ = NULL;

ReqNotice* ReqNotice::New() const {
  return new ReqNotice;
}

void ReqNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    noticeid_ = 0u;
    count_ = 5u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 noticeid = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &noticeid_)));
          set_has_noticeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 2 [default = 5];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 noticeid = 1 [default = 0];
  if (has_noticeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->noticeid(), output);
  }
  
  // optional uint32 count = 2 [default = 5];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 noticeid = 1 [default = 0];
  if (has_noticeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->noticeid(), target);
  }
  
  // optional uint32 count = 2 [default = 5];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 noticeid = 1 [default = 0];
    if (has_noticeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->noticeid());
    }
    
    // optional uint32 count = 2 [default = 5];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqNotice::MergeFrom(const ReqNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_noticeid()) {
      set_noticeid(from.noticeid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqNotice::CopyFrom(const ReqNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqNotice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReqNotice::Swap(ReqNotice* other) {
  if (other != this) {
    std::swap(noticeid_, other->noticeid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqNotice_descriptor_;
  metadata.reflection = ReqNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspNotice::kMessagesFieldNumber;
const int RspNotice::kNoticeidFieldNumber;
const int RspNotice::kReadidFieldNumber;
#endif  // !_MSC_VER

RspNotice::RspNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspNotice::InitAsDefaultInstance() {
}

RspNotice::RspNotice(const RspNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspNotice::SharedCtor() {
  _cached_size_ = 0;
  noticeid_ = 0u;
  readid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspNotice::~RspNotice() {
  SharedDtor();
}

void RspNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspNotice_descriptor_;
}

const RspNotice& RspNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_donsonim_2eproto();  return *default_instance_;
}

RspNotice* RspNotice::default_instance_ = NULL;

RspNotice* RspNotice::New() const {
  return new RspNotice;
}

void RspNotice::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    noticeid_ = 0u;
    readid_ = 0u;
  }
  messages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .donson.im.PushMsg messages = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_messages;
        if (input->ExpectTag(16)) goto parse_noticeid;
        break;
      }
      
      // optional uint32 noticeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_noticeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &noticeid_)));
          set_has_noticeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_readid;
        break;
      }
      
      // optional uint32 readid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_readid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &readid_)));
          set_has_readid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .donson.im.PushMsg messages = 1;
  for (int i = 0; i < this->messages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->messages(i), output);
  }
  
  // optional uint32 noticeid = 2;
  if (has_noticeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->noticeid(), output);
  }
  
  // optional uint32 readid = 3;
  if (has_readid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->readid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .donson.im.PushMsg messages = 1;
  for (int i = 0; i < this->messages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->messages(i), target);
  }
  
  // optional uint32 noticeid = 2;
  if (has_noticeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->noticeid(), target);
  }
  
  // optional uint32 readid = 3;
  if (has_readid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->readid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 noticeid = 2;
    if (has_noticeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->noticeid());
    }
    
    // optional uint32 readid = 3;
    if (has_readid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->readid());
    }
    
  }
  // repeated .donson.im.PushMsg messages = 1;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspNotice::MergeFrom(const RspNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  messages_.MergeFrom(from.messages_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_noticeid()) {
      set_noticeid(from.noticeid());
    }
    if (from.has_readid()) {
      set_readid(from.readid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspNotice::CopyFrom(const RspNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspNotice::IsInitialized() const {
  
  for (int i = 0; i < messages_size(); i++) {
    if (!this->messages(i).IsInitialized()) return false;
  }
  return true;
}

void RspNotice::Swap(RspNotice* other) {
  if (other != this) {
    messages_.Swap(&other->messages_);
    std::swap(noticeid_, other->noticeid_);
    std::swap(readid_, other->readid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspNotice_descriptor_;
  metadata.reflection = RspNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqNoticeAck::kNoticeidFieldNumber;
#endif  // !_MSC_VER

ReqNoticeAck::ReqNoticeAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqNoticeAck::InitAsDefaultInstance() {
}

ReqNoticeAck::ReqNoticeAck(const ReqNoticeAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqNoticeAck::SharedCtor() {
  _cached_size_ = 0;
  noticeid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqNoticeAck::~ReqNoticeAck() {
  SharedDtor();
}

void ReqNoticeAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqNoticeAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqNoticeAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqNoticeAck_descriptor_;
}

const ReqNoticeAck& ReqNoticeAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_donsonim_2eproto();  return *default_instance_;
}

ReqNoticeAck* ReqNoticeAck::default_instance_ = NULL;

ReqNoticeAck* ReqNoticeAck::New() const {
  return new ReqNoticeAck;
}

void ReqNoticeAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    noticeid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqNoticeAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 noticeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &noticeid_)));
          set_has_noticeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqNoticeAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 noticeid = 1;
  if (has_noticeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->noticeid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqNoticeAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 noticeid = 1;
  if (has_noticeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->noticeid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqNoticeAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 noticeid = 1;
    if (has_noticeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->noticeid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqNoticeAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqNoticeAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqNoticeAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqNoticeAck::MergeFrom(const ReqNoticeAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_noticeid()) {
      set_noticeid(from.noticeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqNoticeAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqNoticeAck::CopyFrom(const ReqNoticeAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqNoticeAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReqNoticeAck::Swap(ReqNoticeAck* other) {
  if (other != this) {
    std::swap(noticeid_, other->noticeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqNoticeAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqNoticeAck_descriptor_;
  metadata.reflection = ReqNoticeAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqCheckGrpMsg::kGrpidFieldNumber;
#endif  // !_MSC_VER

ReqCheckGrpMsg::ReqCheckGrpMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqCheckGrpMsg::InitAsDefaultInstance() {
}

ReqCheckGrpMsg::ReqCheckGrpMsg(const ReqCheckGrpMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqCheckGrpMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCheckGrpMsg::~ReqCheckGrpMsg() {
  SharedDtor();
}

void ReqCheckGrpMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqCheckGrpMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCheckGrpMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCheckGrpMsg_descriptor_;
}

const ReqCheckGrpMsg& ReqCheckGrpMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_donsonim_2eproto();  return *default_instance_;
}

ReqCheckGrpMsg* ReqCheckGrpMsg::default_instance_ = NULL;

ReqCheckGrpMsg* ReqCheckGrpMsg::New() const {
  return new ReqCheckGrpMsg;
}

void ReqCheckGrpMsg::Clear() {
  grpid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCheckGrpMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 grpid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_grpid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_grpid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_grpid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqCheckGrpMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 grpid = 1;
  for (int i = 0; i < this->grpid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->grpid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqCheckGrpMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 grpid = 1;
  for (int i = 0; i < this->grpid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->grpid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqCheckGrpMsg::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 grpid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->grpid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->grpid(i));
    }
    total_size += 1 * this->grpid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCheckGrpMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCheckGrpMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCheckGrpMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCheckGrpMsg::MergeFrom(const ReqCheckGrpMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  grpid_.MergeFrom(from.grpid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCheckGrpMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCheckGrpMsg::CopyFrom(const ReqCheckGrpMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCheckGrpMsg::IsInitialized() const {
  
  return true;
}

void ReqCheckGrpMsg::Swap(ReqCheckGrpMsg* other) {
  if (other != this) {
    grpid_.Swap(&other->grpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCheckGrpMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCheckGrpMsg_descriptor_;
  metadata.reflection = ReqCheckGrpMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GrpInfo::kGrpidFieldNumber;
const int GrpInfo::kMsgidFieldNumber;
const int GrpInfo::kReadidFieldNumber;
#endif  // !_MSC_VER

GrpInfo::GrpInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GrpInfo::InitAsDefaultInstance() {
}

GrpInfo::GrpInfo(const GrpInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GrpInfo::SharedCtor() {
  _cached_size_ = 0;
  grpid_ = 0u;
  msgid_ = 0u;
  readid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrpInfo::~GrpInfo() {
  SharedDtor();
}

void GrpInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GrpInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrpInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrpInfo_descriptor_;
}

const GrpInfo& GrpInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_donsonim_2eproto();  return *default_instance_;
}

GrpInfo* GrpInfo::default_instance_ = NULL;

GrpInfo* GrpInfo::New() const {
  return new GrpInfo;
}

void GrpInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grpid_ = 0u;
    msgid_ = 0u;
    readid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GrpInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 grpid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grpid_)));
          set_has_grpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msgid;
        break;
      }
      
      // required uint32 msgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_readid;
        break;
      }
      
      // required uint32 readid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_readid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &readid_)));
          set_has_readid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GrpInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 grpid = 1;
  if (has_grpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->grpid(), output);
  }
  
  // required uint32 msgid = 2;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msgid(), output);
  }
  
  // required uint32 readid = 3;
  if (has_readid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->readid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GrpInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 grpid = 1;
  if (has_grpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->grpid(), target);
  }
  
  // required uint32 msgid = 2;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msgid(), target);
  }
  
  // required uint32 readid = 3;
  if (has_readid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->readid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GrpInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 grpid = 1;
    if (has_grpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grpid());
    }
    
    // required uint32 msgid = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }
    
    // required uint32 readid = 3;
    if (has_readid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->readid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrpInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GrpInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GrpInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GrpInfo::MergeFrom(const GrpInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grpid()) {
      set_grpid(from.grpid());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_readid()) {
      set_readid(from.readid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GrpInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrpInfo::CopyFrom(const GrpInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrpInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void GrpInfo::Swap(GrpInfo* other) {
  if (other != this) {
    std::swap(grpid_, other->grpid_);
    std::swap(msgid_, other->msgid_);
    std::swap(readid_, other->readid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GrpInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GrpInfo_descriptor_;
  metadata.reflection = GrpInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspCheckGrpMsg::kGrpinfoFieldNumber;
#endif  // !_MSC_VER

RspCheckGrpMsg::RspCheckGrpMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspCheckGrpMsg::InitAsDefaultInstance() {
}

RspCheckGrpMsg::RspCheckGrpMsg(const RspCheckGrpMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspCheckGrpMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspCheckGrpMsg::~RspCheckGrpMsg() {
  SharedDtor();
}

void RspCheckGrpMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspCheckGrpMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspCheckGrpMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspCheckGrpMsg_descriptor_;
}

const RspCheckGrpMsg& RspCheckGrpMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_donsonim_2eproto();  return *default_instance_;
}

RspCheckGrpMsg* RspCheckGrpMsg::default_instance_ = NULL;

RspCheckGrpMsg* RspCheckGrpMsg::New() const {
  return new RspCheckGrpMsg;
}

void RspCheckGrpMsg::Clear() {
  grpinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspCheckGrpMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .donson.im.GrpInfo grpinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grpinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grpinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_grpinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspCheckGrpMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .donson.im.GrpInfo grpinfo = 1;
  for (int i = 0; i < this->grpinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->grpinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspCheckGrpMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .donson.im.GrpInfo grpinfo = 1;
  for (int i = 0; i < this->grpinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->grpinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspCheckGrpMsg::ByteSize() const {
  int total_size = 0;
  
  // repeated .donson.im.GrpInfo grpinfo = 1;
  total_size += 1 * this->grpinfo_size();
  for (int i = 0; i < this->grpinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grpinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspCheckGrpMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspCheckGrpMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspCheckGrpMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspCheckGrpMsg::MergeFrom(const RspCheckGrpMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  grpinfo_.MergeFrom(from.grpinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspCheckGrpMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspCheckGrpMsg::CopyFrom(const RspCheckGrpMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspCheckGrpMsg::IsInitialized() const {
  
  for (int i = 0; i < grpinfo_size(); i++) {
    if (!this->grpinfo(i).IsInitialized()) return false;
  }
  return true;
}

void RspCheckGrpMsg::Swap(RspCheckGrpMsg* other) {
  if (other != this) {
    grpinfo_.Swap(&other->grpinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspCheckGrpMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspCheckGrpMsg_descriptor_;
  metadata.reflection = RspCheckGrpMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGetGrpMsg::kGrpidFieldNumber;
const int ReqGetGrpMsg::kMsgidFieldNumber;
const int ReqGetGrpMsg::kCountFieldNumber;
#endif  // !_MSC_VER

ReqGetGrpMsg::ReqGetGrpMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGetGrpMsg::InitAsDefaultInstance() {
}

ReqGetGrpMsg::ReqGetGrpMsg(const ReqGetGrpMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGetGrpMsg::SharedCtor() {
  _cached_size_ = 0;
  grpid_ = 0u;
  msgid_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGetGrpMsg::~ReqGetGrpMsg() {
  SharedDtor();
}

void ReqGetGrpMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqGetGrpMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGetGrpMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGetGrpMsg_descriptor_;
}

const ReqGetGrpMsg& ReqGetGrpMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_donsonim_2eproto();  return *default_instance_;
}

ReqGetGrpMsg* ReqGetGrpMsg::default_instance_ = NULL;

ReqGetGrpMsg* ReqGetGrpMsg::New() const {
  return new ReqGetGrpMsg;
}

void ReqGetGrpMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grpid_ = 0u;
    msgid_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGetGrpMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 grpid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grpid_)));
          set_has_grpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msgid;
        break;
      }
      
      // required uint32 msgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // required uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGetGrpMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 grpid = 1;
  if (has_grpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->grpid(), output);
  }
  
  // required uint32 msgid = 2;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msgid(), output);
  }
  
  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGetGrpMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 grpid = 1;
  if (has_grpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->grpid(), target);
  }
  
  // required uint32 msgid = 2;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msgid(), target);
  }
  
  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGetGrpMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 grpid = 1;
    if (has_grpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grpid());
    }
    
    // required uint32 msgid = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }
    
    // required uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGetGrpMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGetGrpMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGetGrpMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGetGrpMsg::MergeFrom(const ReqGetGrpMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grpid()) {
      set_grpid(from.grpid());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGetGrpMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetGrpMsg::CopyFrom(const ReqGetGrpMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetGrpMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ReqGetGrpMsg::Swap(ReqGetGrpMsg* other) {
  if (other != this) {
    std::swap(grpid_, other->grpid_);
    std::swap(msgid_, other->msgid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGetGrpMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGetGrpMsg_descriptor_;
  metadata.reflection = ReqGetGrpMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspGetGrpMsg::kMessagesFieldNumber;
const int RspGetGrpMsg::kMsgidFieldNumber;
#endif  // !_MSC_VER

RspGetGrpMsg::RspGetGrpMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspGetGrpMsg::InitAsDefaultInstance() {
}

RspGetGrpMsg::RspGetGrpMsg(const RspGetGrpMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspGetGrpMsg::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspGetGrpMsg::~RspGetGrpMsg() {
  SharedDtor();
}

void RspGetGrpMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspGetGrpMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspGetGrpMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspGetGrpMsg_descriptor_;
}

const RspGetGrpMsg& RspGetGrpMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_donsonim_2eproto();  return *default_instance_;
}

RspGetGrpMsg* RspGetGrpMsg::default_instance_ = NULL;

RspGetGrpMsg* RspGetGrpMsg::New() const {
  return new RspGetGrpMsg;
}

void RspGetGrpMsg::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    msgid_ = 0u;
  }
  messages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspGetGrpMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .donson.im.PushGrpMsg messages = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_messages;
        if (input->ExpectTag(16)) goto parse_msgid;
        break;
      }
      
      // optional uint32 msgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspGetGrpMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .donson.im.PushGrpMsg messages = 1;
  for (int i = 0; i < this->messages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->messages(i), output);
  }
  
  // optional uint32 msgid = 2;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspGetGrpMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .donson.im.PushGrpMsg messages = 1;
  for (int i = 0; i < this->messages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->messages(i), target);
  }
  
  // optional uint32 msgid = 2;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspGetGrpMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 msgid = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }
    
  }
  // repeated .donson.im.PushGrpMsg messages = 1;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspGetGrpMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspGetGrpMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspGetGrpMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspGetGrpMsg::MergeFrom(const RspGetGrpMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  messages_.MergeFrom(from.messages_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspGetGrpMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspGetGrpMsg::CopyFrom(const RspGetGrpMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspGetGrpMsg::IsInitialized() const {
  
  for (int i = 0; i < messages_size(); i++) {
    if (!this->messages(i).IsInitialized()) return false;
  }
  return true;
}

void RspGetGrpMsg::Swap(RspGetGrpMsg* other) {
  if (other != this) {
    messages_.Swap(&other->messages_);
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspGetGrpMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspGetGrpMsg_descriptor_;
  metadata.reflection = RspGetGrpMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace im
}  // namespace donson

// @@protoc_insertion_point(global_scope)
